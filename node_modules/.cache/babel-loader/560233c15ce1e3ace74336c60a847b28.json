{"ast":null,"code":"var _jsxFileName = \"/var/www/my-react/src/MyComponents/Contact.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Contact = () => {\n  var _s = $RefreshSig$();\n\n  function MyComponent() {\n    _s();\n\n    const [error, setError] = useState(null);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [items, setItems] = useState([]); // Note: the empty deps array [] means\n    // this useEffect will run once\n    // similar to componentDidMount()\n\n    useEffect(() => {\n      fetch(\"https://api.example.com/items\").then(res => res.json()).then(result => {\n        setIsLoaded(true);\n        setItems(result);\n      }, // Note: it's important to handle errors here\n      // instead of a catch() block so that we don't swallow\n      // exceptions from actual bugs in components.\n      error => {\n        setIsLoaded(true);\n        setError(error);\n      });\n    }, []);\n\n    if (error) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Error: \", error.message]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 18\n      }, this);\n    } else if (!isLoaded) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 18\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: items.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [item.name, \" \", item.price]\n        }, item.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this);\n    }\n  }\n\n  _s(MyComponent, \"m9AscAN57M/MODoTwSsNC5AuztA=\");\n};\n_c = Contact;\n\nvar _c;\n\n$RefreshReg$(_c, \"Contact\");","map":{"version":3,"sources":["/var/www/my-react/src/MyComponents/Contact.js"],"names":["React","Contact","MyComponent","error","setError","useState","isLoaded","setIsLoaded","items","setItems","useEffect","fetch","then","res","json","result","message","map","item","name","price","id"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACzB,WAASC,WAAT,GAAuB;AAAA;;AACnB,UAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBC,QAAQ,CAAC,IAAD,CAAlC;AACA,UAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BF,QAAQ,CAAC,KAAD,CAAxC;AACA,UAAM,CAACG,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,EAAD,CAAlC,CAHmB,CAKnB;AACA;AACA;;AACAK,IAAAA,SAAS,CAAC,MAAM;AACdC,MAAAA,KAAK,CAAC,+BAAD,CAAL,CACGC,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAGKG,MAAD,IAAY;AACVR,QAAAA,WAAW,CAAC,IAAD,CAAX;AACAE,QAAAA,QAAQ,CAACM,MAAD,CAAR;AACD,OANL,EAOI;AACA;AACA;AACCZ,MAAAA,KAAD,IAAW;AACTI,QAAAA,WAAW,CAAC,IAAD,CAAX;AACAH,QAAAA,QAAQ,CAACD,KAAD,CAAR;AACD,OAbL;AAeD,KAhBQ,EAgBN,EAhBM,CAAT;;AAkBA,QAAIA,KAAJ,EAAW;AACT,0BAAO;AAAA,8BAAaA,KAAK,CAACa,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAFD,MAEO,IAAI,CAACV,QAAL,EAAe;AACpB,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAFM,MAEA;AACL,0BACE;AAAA,kBACGE,KAAK,CAACS,GAAN,CAAUC,IAAI,iBACb;AAAA,qBACGA,IAAI,CAACC,IADR,OACeD,IAAI,CAACE,KADpB;AAAA,WAASF,IAAI,CAACG,EAAd;AAAA;AAAA;AAAA;AAAA,gBADD;AADH;AAAA;AAAA;AAAA;AAAA,cADF;AASD;AACF;;AA1CsB,KAChBnB,WADgB;AA2C5B,CA3CM;KAAMD,O","sourcesContent":["import React from 'react'\n\nexport const Contact = () => {\n    function MyComponent() {\n        const [error, setError] = useState(null);\n        const [isLoaded, setIsLoaded] = useState(false);\n        const [items, setItems] = useState([]);\n      \n        // Note: the empty deps array [] means\n        // this useEffect will run once\n        // similar to componentDidMount()\n        useEffect(() => {\n          fetch(\"https://api.example.com/items\")\n            .then(res => res.json())\n            .then(\n              (result) => {\n                setIsLoaded(true);\n                setItems(result);\n              },\n              // Note: it's important to handle errors here\n              // instead of a catch() block so that we don't swallow\n              // exceptions from actual bugs in components.\n              (error) => {\n                setIsLoaded(true);\n                setError(error);\n              }\n            )\n        }, [])\n      \n        if (error) {\n          return <div>Error: {error.message}</div>;\n        } else if (!isLoaded) {\n          return <div>Loading...</div>;\n        } else {\n          return (\n            <ul>\n              {items.map(item => (\n                <li key={item.id}>\n                  {item.name} {item.price}\n                </li>\n              ))}\n            </ul>\n          );\n        }\n      }\n}\n"]},"metadata":{},"sourceType":"module"}